"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectStyle = exports.readyAssets = exports.loadScript = exports.loadStyle = exports.downloadAutocomplete = exports.downloadPostcodeLookup = exports.downloadJQuery = exports.downloadScript = exports.clearCache = exports.loadPostcodeLookup = exports.postcodeLookupPresent = exports.jQueryPresent = exports.loadAutocomplete = exports.autocompletePresent = exports.downloadAutocompleteStyle = void 0;
let autocompleteLink;
const downloadAutocompleteStyle = (d) => {
    if (autocompleteLink !== undefined)
        return autocompleteLink;
    const document = d || window.document;
    autocompleteLink = (0, exports.loadStyle)("https://cdn.jsdelivr.net/npm/ideal-postcodes-autocomplete@0.2.1/css/ideal-postcodes-autocomplete.css", document);
    document.head.appendChild(autocompleteLink);
    return autocompleteLink;
};
exports.downloadAutocompleteStyle = downloadAutocompleteStyle;
const autocompletePresent = (w) => {
    if (w.IdealPostcodes === undefined)
        return false;
    if (w.IdealPostcodes.Autocomplete === undefined)
        return false;
    if (w.IdealPostcodes.Autocomplete.Controller === undefined)
        return false;
    return true;
};
exports.autocompletePresent = autocompletePresent;
const loadAutocomplete = (config) => {
    if (config.autocomplete !== true)
        return "complete";
    if ((0, exports.autocompletePresent)(window))
        return "complete";
    (0, exports.downloadAutocompleteStyle)();
    (0, exports.downloadAutocomplete)();
    return "loading";
};
exports.loadAutocomplete = loadAutocomplete;
const jQueryPresent = (w) => w.jQuery !== undefined;
exports.jQueryPresent = jQueryPresent;
const postcodeLookupPresent = (w) => {
    if ((0, exports.jQueryPresent)(w) === false)
        return false;
    return w.jQuery.prototype.setupPostcodeLookup !== undefined;
};
exports.postcodeLookupPresent = postcodeLookupPresent;
const loadPostcodeLookup = (config) => {
    if (config.postcodeLookup !== true)
        return "complete";
    if ((0, exports.postcodeLookupPresent)(window))
        return "complete";
    (0, exports.downloadJQuery)();
    if ((0, exports.jQueryPresent)(window))
        (0, exports.downloadPostcodeLookup)();
    return "loading";
};
exports.loadPostcodeLookup = loadPostcodeLookup;
const cache = {};
const clearCache = () => {
    for (const url of Object.keys(cache)) {
        delete cache[url];
    }
    autocompleteLink = undefined;
};
exports.clearCache = clearCache;
const downloadScript = (url, integrity) => (d) => {
    if (cache[url])
        return cache[url];
    const document = d || window.document;
    const script = (0, exports.loadScript)(url, integrity, document);
    document.head.appendChild(script);
    cache[url] = script;
    return script;
};
exports.downloadScript = downloadScript;
exports.downloadJQuery = (0, exports.downloadScript)("https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js", "sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=");
exports.downloadPostcodeLookup = (0, exports.downloadScript)("https://cdn.jsdelivr.net/npm/jquery-postcodes@3.0.8/dist/postcodes.min.js", "sha256-JZSN3ZEXOFlpSMFjQkHjbKnjHlsFVf8N7p1SbCI0XHI=");
exports.downloadAutocomplete = (0, exports.downloadScript)("https://cdn.jsdelivr.net/npm/ideal-postcodes-autocomplete@0.2.1/dist/ideal-postcodes-autocomplete.min.js", "sha256-lZPaPHBx7V2Gj9iAc8QfVcW02KlWB2gbrqXpGfiEGgo=");
const loadStyle = (href, document) => {
    const link = document.createElement("link");
    link.type = "text/css";
    link.rel = "stylesheet";
    link.href = href;
    return link;
};
exports.loadStyle = loadStyle;
const loadScript = (src, integrity, document) => {
    const script = document.createElement("script");
    script.type = "text/javascript";
    script.crossOrigin = "anonymous";
    script.integrity = integrity;
    script.src = src;
    return script;
};
exports.loadScript = loadScript;
const readyAssets = ({ config, window }) => {
    let ready = true;
    if (config.autocomplete) {
        (0, exports.loadAutocomplete)(config);
        if (!(0, exports.autocompletePresent)(window))
            ready = false;
    }
    if (config.postcodeLookup) {
        (0, exports.loadPostcodeLookup)(config);
        if (!(0, exports.postcodeLookupPresent)(window))
            ready = false;
    }
    return ready;
};
exports.readyAssets = readyAssets;
const injectStyle = (css, document) => {
    const style = document.createElement("style");
    style.type = "text/css";
    style.appendChild(document.createTextNode(css));
    document.head.appendChild(style);
    return style;
};
exports.injectStyle = injectStyle;
