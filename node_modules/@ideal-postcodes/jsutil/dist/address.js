"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeOrganisation = exports.populateAddress = exports.searchLabels = exports.searchNames = exports.getFields = exports.notInAddress = exports.extract = exports.toAddressLines = exports.join = exports.numberOfLines = exports.addressRetrieval = exports.updateAddressLines = void 0;
const capitalise_post_town_1 = require("capitalise-post-town");
const input_1 = require("./input");
const dom_1 = require("./dom");
const country_1 = require("./country");
const string_1 = require("./string");
const util_1 = require("./util");
const updateAddressLines = (targets, address) => {
    const [line_1, line_2, line_3] = (0, exports.toAddressLines)((0, exports.numberOfLines)(targets), address);
    (0, input_1.update)(targets.line_1, line_1, true);
    (0, input_1.update)(targets.line_2, line_2);
    (0, input_1.update)(targets.line_3, line_3);
};
exports.updateAddressLines = updateAddressLines;
const addressRetrieval = ({ targets, config }) => (address) => {
    (0, exports.updateAddressLines)(targets, address);
    (0, input_1.update)(targets.post_town, address.post_town);
    (0, input_1.update)(targets.postcode, address.postcode);
    (0, country_1.updateCountry)(targets.country, address);
    if (config.populateOrganisation)
        (0, input_1.update)(targets.organisation, address.organisation_name);
    if (config.populateCounty)
        (0, input_1.update)(targets.county, address.county);
};
exports.addressRetrieval = addressRetrieval;
const numberOfLines = (targets) => {
    const { line_2, line_3 } = targets;
    if (!line_2)
        return 1;
    if (!line_3)
        return 2;
    return 3;
};
exports.numberOfLines = numberOfLines;
const join = (list) => list
    .filter((e) => {
    if ((0, string_1.isString)(e))
        return !!e.trim();
    return !!e;
})
    .join(", ");
exports.join = join;
const toAddressLines = (n, address) => {
    const { line_1, line_2, line_3 } = address;
    if (n === 3)
        return [line_1, line_2, line_3];
    if (n === 2)
        return [line_1, (0, exports.join)([line_2, line_3]), ""];
    return [(0, exports.join)([line_1, line_2, line_3]), "", ""];
};
exports.toAddressLines = toAddressLines;
const extract = (a, attr) => {
    const result = a[attr];
    if (typeof result === "number")
        return result.toString();
    if (result === undefined)
        return "";
    return result;
};
exports.extract = extract;
const notInAddress = (o, attr) => o[attr] === undefined;
exports.notInAddress = notInAddress;
const getFields = (o) => ({
    ...o.outputFields,
    ...(0, exports.searchNames)(o.names || {}, o.config.scope),
    ...(0, exports.searchLabels)(o.labels || {}, o.config.scope),
});
exports.getFields = getFields;
const updateLines = (fields, address, scope) => {
    const [line_1, line_2, line_3] = (0, exports.toAddressLines)((0, exports.numberOfLines)(fields), address);
    (0, input_1.update)((0, dom_1.toElem)(fields.line_1 || null, scope), line_1);
    (0, input_1.update)((0, dom_1.toElem)(fields.line_2 || null, scope), line_2);
    (0, input_1.update)((0, dom_1.toElem)(fields.line_3 || null, scope), line_3);
};
const searchNames = (names, scope) => {
    const result = {};
    let key;
    for (key in names) {
        if (!names.hasOwnProperty(key))
            continue;
        const name = names[key];
        const named = (0, dom_1.toElem)(`[name="${name}"]`, scope);
        if (named) {
            result[key] = named;
            continue;
        }
        const ariaNamed = (0, dom_1.toElem)(`[aria-name="${name}"]`, scope);
        if (ariaNamed)
            result[key] = ariaNamed;
    }
    return result;
};
exports.searchNames = searchNames;
const searchLabels = (labels, scope) => {
    const result = {};
    if (labels === undefined)
        return labels;
    let key;
    for (key in labels) {
        if (!labels.hasOwnProperty(key))
            continue;
        const name = labels[key];
        if (!name)
            continue;
        const first = (0, dom_1.contains)(scope, "label", name);
        const label = (0, dom_1.toElem)(first, scope);
        if (!label)
            continue;
        const forEl = label.getAttribute("for");
        if (forEl) {
            const byId = scope.querySelector(`#${(0, util_1.cssEscape)(forEl)}`);
            if (byId) {
                result[key] = byId;
                continue;
            }
        }
        const inner = label.querySelector("input");
        if (inner)
            result[key] = inner;
    }
    return result;
};
exports.searchLabels = searchLabels;
const populateAddress = (options) => {
    const { config } = options;
    const address = { ...options.address };
    const { scope, titleizePostTown, populateOrganisation, populateCounty } = config;
    const fields = (0, exports.getFields)(options);
    if (config.removeOrganisation)
        (0, exports.removeOrganisation)(address);
    if (titleizePostTown)
        address.post_town = (0, capitalise_post_town_1.capitalisePostTown)(address.post_town);
    updateLines(fields, address, scope);
    delete address.line_1;
    delete address.line_2;
    delete address.line_3;
    (0, country_1.updateCountry)((0, dom_1.toElem)(fields.country || null, scope), address);
    delete address.country;
    if (populateOrganisation === false)
        delete address.organisation_name;
    if (populateCounty === false)
        delete address.county;
    let e;
    for (e in fields) {
        if ((0, exports.notInAddress)(address, e))
            continue;
        if (fields.hasOwnProperty(e)) {
            const value = fields[e];
            if (!value)
                continue;
            (0, input_1.update)((0, dom_1.toElem)(value, scope), (0, exports.extract)(address, e));
        }
    }
};
exports.populateAddress = populateAddress;
const removeOrganisation = (address) => {
    if (address.organisation_name.length === 0)
        return address;
    if (address.line_2.length === 0 && address.line_3.length === 0)
        return address;
    if (address.line_1 === address.organisation_name) {
        address.line_1 = address.line_2;
        address.line_2 = address.line_3;
        address.line_3 = "";
    }
    return address;
};
exports.removeOrganisation = removeOrganisation;
