import { capitalisePostTown } from "capitalise-post-town";
import { update } from "./input";
import { toElem, contains } from "./dom";
import { updateCountry } from "./country";
import { isString } from "./string";
import { cssEscape } from "./util";
export const updateAddressLines = (targets, address) => {
    const [line_1, line_2, line_3] = toAddressLines(numberOfLines(targets), address);
    update(targets.line_1, line_1, true);
    update(targets.line_2, line_2);
    update(targets.line_3, line_3);
};
export const addressRetrieval = ({ targets, config }) => (address) => {
    updateAddressLines(targets, address);
    update(targets.post_town, address.post_town);
    update(targets.postcode, address.postcode);
    updateCountry(targets.country, address);
    if (config.populateOrganisation)
        update(targets.organisation, address.organisation_name);
    if (config.populateCounty)
        update(targets.county, address.county);
};
export const numberOfLines = (targets) => {
    const { line_2, line_3 } = targets;
    if (!line_2)
        return 1;
    if (!line_3)
        return 2;
    return 3;
};
export const join = (list) => list
    .filter((e) => {
    if (isString(e))
        return !!e.trim();
    return !!e;
})
    .join(", ");
export const toAddressLines = (n, address) => {
    const { line_1, line_2, line_3 } = address;
    if (n === 3)
        return [line_1, line_2, line_3];
    if (n === 2)
        return [line_1, join([line_2, line_3]), ""];
    return [join([line_1, line_2, line_3]), "", ""];
};
export const extract = (a, attr) => {
    const result = a[attr];
    if (typeof result === "number")
        return result.toString();
    if (result === undefined)
        return "";
    return result;
};
export const notInAddress = (o, attr) => o[attr] === undefined;
export const getFields = (o) => ({
    ...o.outputFields,
    ...searchNames(o.names || {}, o.config.scope),
    ...searchLabels(o.labels || {}, o.config.scope),
});
const updateLines = (fields, address, scope) => {
    const [line_1, line_2, line_3] = toAddressLines(numberOfLines(fields), address);
    update(toElem(fields.line_1 || null, scope), line_1);
    update(toElem(fields.line_2 || null, scope), line_2);
    update(toElem(fields.line_3 || null, scope), line_3);
};
export const searchNames = (names, scope) => {
    const result = {};
    let key;
    for (key in names) {
        if (!names.hasOwnProperty(key))
            continue;
        const name = names[key];
        const named = toElem(`[name="${name}"]`, scope);
        if (named) {
            result[key] = named;
            continue;
        }
        const ariaNamed = toElem(`[aria-name="${name}"]`, scope);
        if (ariaNamed)
            result[key] = ariaNamed;
    }
    return result;
};
export const searchLabels = (labels, scope) => {
    const result = {};
    if (labels === undefined)
        return labels;
    let key;
    for (key in labels) {
        if (!labels.hasOwnProperty(key))
            continue;
        const name = labels[key];
        if (!name)
            continue;
        const first = contains(scope, "label", name);
        const label = toElem(first, scope);
        if (!label)
            continue;
        const forEl = label.getAttribute("for");
        if (forEl) {
            const byId = scope.querySelector(`#${cssEscape(forEl)}`);
            if (byId) {
                result[key] = byId;
                continue;
            }
        }
        const inner = label.querySelector("input");
        if (inner)
            result[key] = inner;
    }
    return result;
};
export const populateAddress = (options) => {
    const { config } = options;
    const address = { ...options.address };
    const { scope, titleizePostTown, populateOrganisation, populateCounty } = config;
    const fields = getFields(options);
    if (config.removeOrganisation)
        removeOrganisation(address);
    if (titleizePostTown)
        address.post_town = capitalisePostTown(address.post_town);
    updateLines(fields, address, scope);
    delete address.line_1;
    delete address.line_2;
    delete address.line_3;
    updateCountry(toElem(fields.country || null, scope), address);
    delete address.country;
    if (populateOrganisation === false)
        delete address.organisation_name;
    if (populateCounty === false)
        delete address.county;
    let e;
    for (e in fields) {
        if (notInAddress(address, e))
            continue;
        if (fields.hasOwnProperty(e)) {
            const value = fields[e];
            if (!value)
                continue;
            update(toElem(value, scope), extract(address, e));
        }
    }
};
export const removeOrganisation = (address) => {
    if (address.organisation_name.length === 0)
        return address;
    if (address.line_2.length === 0 && address.line_3.length === 0)
        return address;
    if (address.line_1 === address.organisation_name) {
        address.line_1 = address.line_2;
        address.line_2 = address.line_3;
        address.line_3 = "";
    }
    return address;
};
