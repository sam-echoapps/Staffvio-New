import { Address } from "@ideal-postcodes/api-typings";
export interface Binding {
    pageTest: PageTest;
    bind: Bind;
}
export interface Start {
    (config?: Config): number | null;
}
export interface Stop {
    (): void;
}
export interface Bind<T extends Config = Config> {
    (config?: T): void;
}
export interface PageTest {
    (): boolean;
}
export interface Selectors {
    line_1: string;
    line_2?: string;
    line_3?: string;
    post_town: string;
    county?: string;
    postcode: string;
    organisation?: string;
    country: string;
}
export interface Config {
    enabled: boolean;
    apiKey: string;
    populateOrganisation: boolean;
    populateCounty: boolean;
    autocomplete: boolean;
    autocompleteOverride: AutocompleteConfig;
    postcodeLookup: boolean;
    postcodeLookupOverride: PostcodeLookupConfig;
    watchCountry?: boolean;
    separateFinder?: boolean;
}
export interface Targets {
    line_1: HTMLElement | null;
    line_2?: HTMLElement | null;
    line_3?: HTMLElement | null;
    post_town: HTMLElement | null;
    county: HTMLElement | null;
    postcode: HTMLElement | null;
    organisation: HTMLElement | null;
    country: HTMLElement | null;
}
export declare type AutocompleteConfig = any;
export declare type PostcodeLookupConfig = any;
export declare type UkCountry = "England" | "Wales" | "Northern Ireland" | "Scotland" | "Channel Islands" | "Isle of Man";
export declare type ChannelIslandIso = "JE" | "GG";
export declare type CountryIso = "GB" | "IM" | ChannelIslandIso;
export declare type Country = "United Kingdom" | "Jersey" | "Guernsey" | "Isle of Man";
export declare type LineCount = 1 | 2 | 3;
export declare type LoadState = "complete" | "loading";
export interface ParentTest {
    (e: HTMLElement): boolean;
}
export declare type OutputFields = Partial<Record<keyof Address, SelectorNode>>;
export declare type NamedFields = Partial<Record<keyof Address, string>>;
export declare type SelectorNode = string | HTMLInputElement | HTMLTextAreaElement;
