import { trigger } from "./event";
export const isSelect = (e) => {
    if (e === null)
        return false;
    return e instanceof HTMLSelectElement;
};
export const isInput = (e) => {
    if (e === null)
        return false;
    return e instanceof HTMLInputElement;
};
export const isTextarea = (e) => {
    if (e === null)
        return false;
    return e instanceof HTMLTextAreaElement;
};
export const update = (input, value, skipTrigger = false) => {
    if (!input)
        return;
    if (!isInput(input) && !isTextarea(input))
        return;
    change({ e: input, value, skipTrigger });
};
export const hasValue = (select, value) => {
    if (value === null)
        return false;
    return select.querySelector(`[value="${value}"]`) !== null;
};
const updateSelect = ({ e, value, skipTrigger }) => {
    if (value === null)
        return;
    if (!isSelect(e))
        return;
    setValue(e, value);
    if (!skipTrigger)
        trigger(e, "select");
    trigger(e, "change");
};
export const setValue = (e, value) => {
    const descriptor = Object.getOwnPropertyDescriptor(e.constructor.prototype, "value");
    if (descriptor === undefined)
        return;
    if (descriptor.set === undefined)
        return;
    const setter = descriptor.set;
    setter.call(e, value);
};
const updateInput = ({ e, value, skipTrigger }) => {
    if (value === null)
        return;
    if (!isInput(e) && !isTextarea(e))
        return;
    setValue(e, value);
    if (!skipTrigger)
        trigger(e, "input");
    trigger(e, "change");
};
export const change = (options) => {
    if (options.value === null)
        return;
    updateSelect(options);
    updateInput(options);
};
