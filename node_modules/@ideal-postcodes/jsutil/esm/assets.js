let autocompleteLink;
export const downloadAutocompleteStyle = (d) => {
    if (autocompleteLink !== undefined)
        return autocompleteLink;
    const document = d || window.document;
    autocompleteLink = loadStyle("https://cdn.jsdelivr.net/npm/ideal-postcodes-autocomplete@0.2.1/css/ideal-postcodes-autocomplete.css", document);
    document.head.appendChild(autocompleteLink);
    return autocompleteLink;
};
export const autocompletePresent = (w) => {
    if (w.IdealPostcodes === undefined)
        return false;
    if (w.IdealPostcodes.Autocomplete === undefined)
        return false;
    if (w.IdealPostcodes.Autocomplete.Controller === undefined)
        return false;
    return true;
};
export const loadAutocomplete = (config) => {
    if (config.autocomplete !== true)
        return "complete";
    if (autocompletePresent(window))
        return "complete";
    downloadAutocompleteStyle();
    downloadAutocomplete();
    return "loading";
};
export const jQueryPresent = (w) => w.jQuery !== undefined;
export const postcodeLookupPresent = (w) => {
    if (jQueryPresent(w) === false)
        return false;
    return w.jQuery.prototype.setupPostcodeLookup !== undefined;
};
export const loadPostcodeLookup = (config) => {
    if (config.postcodeLookup !== true)
        return "complete";
    if (postcodeLookupPresent(window))
        return "complete";
    downloadJQuery();
    if (jQueryPresent(window))
        downloadPostcodeLookup();
    return "loading";
};
const cache = {};
export const clearCache = () => {
    for (const url of Object.keys(cache)) {
        delete cache[url];
    }
    autocompleteLink = undefined;
};
export const downloadScript = (url, integrity) => (d) => {
    if (cache[url])
        return cache[url];
    const document = d || window.document;
    const script = loadScript(url, integrity, document);
    document.head.appendChild(script);
    cache[url] = script;
    return script;
};
export const downloadJQuery = downloadScript("https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js", "sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=");
export const downloadPostcodeLookup = downloadScript("https://cdn.jsdelivr.net/npm/jquery-postcodes@3.0.8/dist/postcodes.min.js", "sha256-JZSN3ZEXOFlpSMFjQkHjbKnjHlsFVf8N7p1SbCI0XHI=");
export const downloadAutocomplete = downloadScript("https://cdn.jsdelivr.net/npm/ideal-postcodes-autocomplete@0.2.1/dist/ideal-postcodes-autocomplete.min.js", "sha256-lZPaPHBx7V2Gj9iAc8QfVcW02KlWB2gbrqXpGfiEGgo=");
export const loadStyle = (href, document) => {
    const link = document.createElement("link");
    link.type = "text/css";
    link.rel = "stylesheet";
    link.href = href;
    return link;
};
export const loadScript = (src, integrity, document) => {
    const script = document.createElement("script");
    script.type = "text/javascript";
    script.crossOrigin = "anonymous";
    script.integrity = integrity;
    script.src = src;
    return script;
};
export const readyAssets = ({ config, window }) => {
    let ready = true;
    if (config.autocomplete) {
        loadAutocomplete(config);
        if (!autocompletePresent(window))
            ready = false;
    }
    if (config.postcodeLookup) {
        loadPostcodeLookup(config);
        if (!postcodeLookupPresent(window))
            ready = false;
    }
    return ready;
};
export const injectStyle = (css, document) => {
    const style = document.createElement("style");
    style.type = "text/css";
    style.appendChild(document.createTextNode(css));
    document.head.appendChild(style);
    return style;
};
