import { Address } from "@ideal-postcodes/api-typings";
import { Targets, OutputFields, LineCount, Config, NamedFields } from "./types";
export declare const updateAddressLines: (targets: Targets, address: Address) => void;
interface Options {
    targets: Targets;
    config: Config;
}
interface AddressRetrieval {
    (options: Options): (a: Address) => void;
}
export declare const addressRetrieval: AddressRetrieval;
export declare const numberOfLines: (targets: Targets) => LineCount;
export declare const join: (list: unknown[]) => string;
export declare const toAddressLines: (n: LineCount, address: Address) => [string, string, string];
export declare const extract: (a: Address, attr: keyof Address) => string;
export declare const notInAddress: (o: Address, attr: keyof Address) => boolean;
export declare const getFields: (o: PopulateAddressOptions) => OutputFields;
export interface PopulateConfig {
    scope: HTMLElement | Document;
    titleizePostTown?: boolean;
    removeOrganisation?: boolean;
    populateCounty?: boolean;
    populateOrganisation?: boolean;
}
export interface PopulateAddressOptions {
    outputFields: OutputFields;
    names?: NamedFields;
    labels?: NamedFields;
    address: Address;
    config: PopulateConfig;
}
interface PopulateAddress {
    (options: PopulateAddressOptions): void;
}
export declare const searchNames: (names: NamedFields, scope: HTMLElement | Document) => OutputFields;
export declare const searchLabels: (labels: NamedFields, scope: HTMLElement | Document) => OutputFields;
export declare const populateAddress: PopulateAddress;
export declare const removeOrganisation: (address: Address) => Address;
export {};
