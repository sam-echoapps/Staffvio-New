import { toStringMap, toTimeout, toHeader } from "../util";
import { parse } from "../error";
// Writes a resource to URL string
const toRetrieveUrl = (options, id) => [
    options.client.url(),
    options.resource,
    encodeURIComponent(id),
    options.action,
]
    .filter((e) => e !== undefined)
    .join("/");
export const retrieveMethod = (options) => {
    const { client } = options;
    return (id, request) => client.config.agent
        .http({
        method: "GET",
        url: toRetrieveUrl(options, id),
        query: toStringMap(request.query),
        header: toHeader(request, client),
        timeout: toTimeout(request, client),
    })
        .then((response) => {
        const error = parse(response);
        if (error)
            throw error;
        return response;
    });
};
export const listMethod = (options) => {
    const { client, resource } = options;
    return (request) => client.config.agent
        .http({
        method: "GET",
        url: `${client.url()}/${resource}`,
        query: toStringMap(request.query),
        header: toHeader(request, client),
        timeout: toTimeout(request, client),
    })
        .then((response) => {
        const error = parse(response);
        if (error)
            throw error;
        return response;
    });
};
