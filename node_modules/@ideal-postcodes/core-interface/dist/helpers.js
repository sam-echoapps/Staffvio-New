"use strict";
/**
 * @module Helper Methods
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkKeyUsability = exports.lookupUmprn = exports.lookupUdprn = exports.toAddressLookupQuery = exports.toAddressIdQuery = exports.lookupAddress = exports.lookupPostcode = exports.ping = void 0;
var addresses = __importStar(require("./resources/addresses"));
var keys = __importStar(require("./resources/keys"));
var postcodes = __importStar(require("./resources/postcodes"));
var udprn = __importStar(require("./resources/udprn"));
var umprn = __importStar(require("./resources/umprn"));
var util_1 = require("./util");
var error_1 = require("./error");
/**
 * Ping API base (`/`)
 *
 * Dispatches HTTP request to root endpoint "`/`"
 */
var ping = function (client) {
    var method = "GET";
    var url = client.protocol() + "://" + client.config.baseUrl + "/";
    return client.config.agent.http({
        method: method,
        url: url,
        header: {},
        query: {},
        timeout: client.config.timeout,
    });
};
exports.ping = ping;
/**
 * Lookup Postcode
 *
 * Search for addresses given a postcode. Postcode queries are case and space insensitive
 *
 * Invalid postcodes return an empty array address result `[]`
 *
 * [API Documentation for /postcodes](https://ideal-postcodes.co.uk/documentation/postcodes#postcode)
 */
var lookupPostcode = function (options) {
    var queryOptions = (0, exports.toAddressIdQuery)(options);
    var page = options.page;
    if (page !== undefined)
        queryOptions.query.page = page.toString();
    return postcodes
        .retrieve(options.client, options.postcode, queryOptions)
        .then(function (response) { return response.body.result; })
        .catch(function (error) {
        if (error instanceof error_1.IdpcPostcodeNotFoundError)
            return [];
        throw error;
    });
};
exports.lookupPostcode = lookupPostcode;
/**
 * Lookup Address
 *
 * Search for an address given a query
 *
 * [API Documentation for /addresses](https://ideal-postcodes.co.uk/documentation/addresses#query)
 */
var lookupAddress = function (options) {
    var queryOptions = (0, exports.toAddressLookupQuery)(options);
    return addresses
        .list(options.client, queryOptions)
        .then(function (response) { return response.body.result.hits; });
};
exports.lookupAddress = lookupAddress;
/**
 * Generates a request object. Bundles together commonly used header/query extractions:
 * - Authorization (api_key, licensee, user_token)
 * - Source IP forwarding
 * - Result filtering
 * - Tagging
 */
var toAddressIdQuery = function (options) {
    var header = {};
    var query = {};
    var client = options.client;
    (0, util_1.appendAuthorization)({ client: client, header: header, options: options });
    (0, util_1.appendIp)({ header: header, options: options });
    (0, util_1.appendFilter)({ query: query, options: options });
    (0, util_1.appendTags)({ client: client, query: query, options: options });
    var request = { header: header, query: query };
    if (options.timeout !== undefined)
        request.timeout = options.timeout;
    return request;
};
exports.toAddressIdQuery = toAddressIdQuery;
var toAddressLookupQuery = function (options) {
    var header = {};
    var query = { query: options.query };
    var client = options.client;
    (0, util_1.appendAuthorization)({ client: client, header: header, options: options });
    (0, util_1.appendIp)({ header: header, options: options });
    (0, util_1.appendFilter)({ query: query, options: options });
    (0, util_1.appendTags)({ client: client, query: query, options: options });
    (0, util_1.appendPage)({ query: query, options: options });
    var queryOptions = { header: header, query: query };
    if (options.timeout !== undefined)
        queryOptions.timeout = options.timeout;
    return queryOptions;
};
exports.toAddressLookupQuery = toAddressLookupQuery;
/**
 * Lookup UDPRN
 *
 * Search for an address given a UDPRN
 *
 * Invalid UDPRN returns `null`
 *
 * [API Documentation for /udprn](https://ideal-postcodes.co.uk/documentation/udprn)
 */
var lookupUdprn = function (options) {
    var queryOptions = (0, exports.toAddressIdQuery)(options);
    return udprn
        .retrieve(options.client, options.udprn.toString(), queryOptions)
        .then(function (response) { return response.body.result; })
        .catch(function (error) {
        if (error instanceof error_1.IdpcUdprnNotFoundError)
            return null;
        throw error;
    });
};
exports.lookupUdprn = lookupUdprn;
/**
 * Lookup UMPRN
 *
 * Search for an address given a UDPRN
 *
 * Invalid UDPRN returns `null`
 *
 * [API Documentation for /udprn](https://ideal-postcodes.co.uk/documentation/udprn)
 */
var lookupUmprn = function (options) {
    var queryOptions = (0, exports.toAddressIdQuery)(options);
    return umprn
        .retrieve(options.client, options.umprn.toString(), queryOptions)
        .then(function (response) { return response.body.result; })
        .catch(function (error) {
        if (error instanceof error_1.IdpcUmprnNotFoundError)
            return null;
        throw error;
    });
};
exports.lookupUmprn = lookupUmprn;
/**
 * Check Key Availability
 *
 * Checks if a key can bey used
 *
 * [API Documentation for /keys]()https://ideal-postcodes.co.uk/documentation/keys#key)
 */
var checkKeyUsability = function (options) {
    var client = options.client, timeout = options.timeout;
    var api_key = options.api_key || options.client.config.api_key;
    var licensee = options.licensee;
    var query;
    if (licensee === undefined) {
        query = {};
    }
    else {
        query = { licensee: licensee };
    }
    var queryOptions = { query: query, header: {} };
    if (timeout !== undefined)
        queryOptions.timeout = timeout;
    return keys
        .retrieve(client, api_key, queryOptions)
        .then(function (response) { return response.body.result; }); // Assert that we're retrieving public key information as no user_token provided
};
exports.checkKeyUsability = checkKeyUsability;
