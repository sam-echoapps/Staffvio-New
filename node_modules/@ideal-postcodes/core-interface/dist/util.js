"use strict";
/**
 * @module Utils
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appendPage = exports.appendTags = exports.appendFilter = exports.appendIp = exports.appendAuthorization = exports.toAuthHeader = exports.toHeader = exports.toTimeout = exports.toStringMap = void 0;
/**
 * toQuery
 *
 * Shallow copies object while omitting undefined attributes
 */
var toStringMap = function (optional) {
    if (optional === undefined)
        return {};
    return Object.keys(optional).reduce(function (result, key) {
        var value = optional[key];
        var reduce = reduceStringMap(value);
        if (reduce.length > 0)
            result[key] = reduce;
        return result;
    }, {});
};
exports.toStringMap = toStringMap;
var isString = function (i) { return typeof i === "string"; };
var isArray = function (i) { return Array.isArray(i); };
var reduceStringMap = function (value) {
    var result = [];
    if (isArray(value)) {
        value.forEach(function (val) {
            if (isNumber(val))
                result.push(val.toString());
            if (isString(val))
                result.push(val);
        });
        return result.join(",");
    }
    if (isNumber(value))
        return value.toString();
    if (isString(value))
        return value;
    return "";
};
var isNumber = function (n) { return typeof n === "number"; };
/**
 * toTimeout
 *
 * Returns timeout value from request object. Delegates to default client
 * timeout if not specified
 */
var toTimeout = function (_a, client) {
    var timeout = _a.timeout;
    if (isNumber(timeout))
        return timeout;
    return client.config.timeout;
};
exports.toTimeout = toTimeout;
/**
 * toHeader
 *
 * Extracts HTTP Header object from request and client default headers
 *
 * Precendence is given to request specific headers
 */
var toHeader = function (_a, client) {
    var _b = _a.header, header = _b === void 0 ? {} : _b;
    return __assign(__assign({}, client.config.header), (0, exports.toStringMap)(header));
};
exports.toHeader = toHeader;
/**
 * toAuthHeader
 *
 * Extracts credentials into authorization header format
 */
var toAuthHeader = function (client, options) {
    var credentials = [];
    var api_key = options.api_key || client.config.api_key;
    credentials.push(["api_key", api_key]);
    var licensee = options.licensee;
    if (licensee !== undefined)
        credentials.push(["licensee", licensee]);
    var user_token = options.user_token;
    if (user_token !== undefined)
        credentials.push(["user_token", user_token]);
    return "IDEALPOSTCODES " + toCredentialString(credentials);
};
exports.toAuthHeader = toAuthHeader;
/**
 * appendAuthorization
 *
 * Mutates a headers object to include Authorization header. Will insert if found:
 * - api_key
 * - licensee
 * - user_token
 */
var appendAuthorization = function (_a) {
    var header = _a.header, options = _a.options, client = _a.client;
    header.Authorization = (0, exports.toAuthHeader)(client, options);
    return header;
};
exports.appendAuthorization = appendAuthorization;
var toCredentialString = function (credentials) {
    return credentials.map(function (_a) {
        var key = _a[0], value = _a[1];
        return key + "=\"" + value + "\"";
    }).join(" ");
};
// Adds source IP to headers
var appendIp = function (_a) {
    var header = _a.header, options = _a.options;
    var sourceIp = options.sourceIp;
    if (sourceIp !== undefined)
        header["IDPC-Source-IP"] = sourceIp;
    return header;
};
exports.appendIp = appendIp;
// Adds filters to query
var appendFilter = function (_a) {
    var query = _a.query, options = _a.options;
    var filter = options.filter;
    if (filter !== undefined)
        query.filter = filter.join(",");
    return query;
};
exports.appendFilter = appendFilter;
// Adds tags to query
var appendTags = function (_a) {
    var client = _a.client, query = _a.query, options = _a.options;
    var tags;
    if (client.config.tags.length)
        tags = client.config.tags;
    if (options.tags)
        tags = options.tags;
    if (tags !== undefined)
        query.tags = tags.join(",");
    return query;
};
exports.appendTags = appendTags;
// Adds pagination attributes to query
var appendPage = function (_a) {
    var query = _a.query, options = _a.options;
    var page = options.page, limit = options.limit;
    if (page !== undefined)
        query.page = page.toString();
    if (limit !== undefined)
        query.limit = limit.toString();
    return query;
};
exports.appendPage = appendPage;
